package com.pinshang.qingyun.pdf;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.pinshang.qingyun.base.api.TokenInfo;
import com.pinshang.qingyun.common.dto.PrinterTaskINDTO;
import com.pinshang.qingyun.common.service.PrintClient;
import com.pinshang.qingyun.util.PdfUtils;
import com.pinshang.qingyun.util.ThreadLocalUtil;
import com.pinshang.qingyun.vo.PlankCodeVo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

/**
 * Created by honway on 2017/5/5 11:04.
 * 板单号生成PDF服务类
 */
@Component
@ConfigurationProperties(prefix = "qingyun")
public class PlankPdfService {

    private Logger logger = LoggerFactory.getLogger(PlankPdfService.class);

    @Autowired
    private PrintClient printClient;

    /**
     * PDF 文件保存位置.
     */
    private String pdfSaveAbsolutePath;
    private String pdfSaveRelativePath;

    /**
     * 打印纸张大小及比例
     * 宽度为100mm
     * 高度为100mm
     * 比例为2.83
     */
    private static final float SCALE = 2.83f;
    private static final float PAPER_WIDTH = 100 * SCALE;
    private static final float PAPER_HEIGHT = 100 * SCALE;

    public void createPdf(PlankCodeVo plankCodeVo) throws DocumentException, IOException, WriterException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String pdfSaveAbsolutePath = getPdfSaveAbsolutePath();
        String pdfSaveRelativePath = getPdfSaveRelativePath();
        pdfSaveRelativePath = pdfSaveRelativePath.endsWith("/") ? pdfSaveRelativePath : pdfSaveRelativePath + "/";
        pdfSaveRelativePath = pdfSaveRelativePath + dateFormat.format(date) + "/";
        pdfSaveAbsolutePath = pdfSaveAbsolutePath.endsWith("/") ? pdfSaveAbsolutePath : pdfSaveAbsolutePath + "/";
        pdfSaveAbsolutePath = pdfSaveAbsolutePath + pdfSaveRelativePath;
        File file = new File(pdfSaveAbsolutePath);
        if (!file.exists()) {
            file.mkdirs();
        }
        String filename = plankCodeVo.getPlankCode() + "_" + date.getTime() + ".pdf";
        String relativePath = pdfSaveRelativePath + filename;
        String filepath = pdfSaveAbsolutePath + filename;
        FileOutputStream fileOutputStream = new FileOutputStream(new File(filepath));

        Font font = PdfUtils.chineseFont(10);

        PdfPCell blankLine = new PdfPCell(new Phrase(" "));
        blankLine.setBorder(Rectangle.NO_BORDER);
        blankLine.setColspan(2);

        Document document = new Document(new RectangleReadOnly(PAPER_HEIGHT, PAPER_WIDTH),5,5,5,5);
        PdfWriter writer = PdfWriter.getInstance(document, fileOutputStream);
        document.open();
        PdfPTable table = new PdfPTable(new float[]{6,4});
        table.setWidthPercentage(100);

        table.addCell(blankLine);

        PdfPCell contentCell = new PdfPCell(new Phrase("货位: " + plankCodeVo.getShelfName(), font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        String warehouseName = plankCodeVo.getWarehouseName();
        if (warehouseName.length() > 7) {
            warehouseName = warehouseName.substring(0, 7);
        }
        contentCell = new PdfPCell(new Phrase("仓库: " + warehouseName, font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        table.addCell(blankLine);

        String commodityName = plankCodeVo.getCommodityName();
        if (commodityName.length() > 10) {
            commodityName = commodityName.substring(0, 10);
        }
        contentCell = new PdfPCell(new Phrase("商品名称: " + commodityName, font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        contentCell = new PdfPCell(new Phrase("到期日期: " + dateFormat.format(plankCodeVo.getExpirationDate()), font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        table.addCell(blankLine);

        String commoditySpec = plankCodeVo.getCommoditySpec();
        if (commoditySpec.length() > 15) {
            commoditySpec = commoditySpec.substring(0, 15);
        }
        contentCell = new PdfPCell(new Phrase("规格: " + commoditySpec, font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        contentCell = new PdfPCell(new Phrase("商品编码: " + plankCodeVo.getCommodityCode(), font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        table.addCell(blankLine);

        contentCell = new PdfPCell(new Phrase("收货数量: " + plankCodeVo.getReceiveNumber(), font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        contentCell = new PdfPCell(new Phrase("收货日期: " + dateFormat.format(plankCodeVo.getReceiveDate()), font));
        contentCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(contentCell);

        table.addCell(blankLine);

        String receiveRemark = plankCodeVo.getReceiveRemark();
        if(receiveRemark!=null){
            if (receiveRemark.length() > 21) {
                receiveRemark = receiveRemark.substring(0, 21);
            }
            contentCell = new PdfPCell(new Phrase("收货备注: " + receiveRemark, font));
            contentCell.setColspan(2);
            contentCell.setBorder(Rectangle.NO_BORDER);
            table.addCell(contentCell);

        }

        //table.addCell(blankLine);

        qrcode(plankCodeVo, table);
        //barcode(plankCodeVo, table, writer);

        Font fontBold = PdfUtils.chineseFontBold(16);
        PdfPCell codeCell = new PdfPCell(new Phrase("板单号: " + plankCodeVo.getPlankCode(), fontBold));
        codeCell.setColspan(2);
        codeCell.setBorder(Rectangle.NO_BORDER);
        codeCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        codeCell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(codeCell);

        document.add(table);
        document.close();

        // 生成打印任务
        TokenInfo tokenInfo = ThreadLocalUtil.get();
        Long userId = tokenInfo.getUserId();
        PrinterTaskINDTO printTask = new PrinterTaskINDTO();
        printTask.setUserId(userId);
        printTask.setAvg(0);
        printTask.setCreatedAt(date);
        printTask.setDataType(5);
        printTask.setNumber(1);
        printTask.setFilePath(relativePath);
        String resp = printClient.savePrintTask(printTask);
        if ("ok".equals(resp)) {
            logger.info(filepath + "打印成功!");
        } else {
            logger.error(filepath + "打印失败!" + resp);
        }
    }

    /**
     * 二维码
     * @param plankCodeVo 二维码内容
     * @param table 表格
     * @throws BadElementException
     */
    private void qrcode(PlankCodeVo plankCodeVo, PdfPTable table) throws BadElementException, WriterException, IOException {
        HashMap<EncodeHintType, Object> hints = new HashMap<>();
        hints.put(EncodeHintType.MARGIN, 2); //设置边距
        hints.put(EncodeHintType.CHARACTER_SET, "UTF-8"); //设置编码方式
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M); //设置纠错级别

        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix encode = qrCodeWriter.encode(plankCodeVo.getPlankCode(), BarcodeFormat.QR_CODE, 100, 100);
        BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(encode);
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        ImageIO.write(bufferedImage, "png", bytes);
        Image image = Image.getInstance(bytes.toByteArray());
        PdfPCell cell = new PdfPCell(image);
        cell.setColspan(2);
        cell.setBorder(Rectangle.NO_BORDER);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
    }


    public String getPdfSaveRelativePath() {
        return pdfSaveRelativePath;
    }

    public void setPdfSaveRelativePath(String pdfSaveRelativePath) {
        this.pdfSaveRelativePath = pdfSaveRelativePath;
    }

    public String getPdfSaveAbsolutePath() {
        return pdfSaveAbsolutePath;
    }

    public void setPdfSaveAbsolutePath(String pdfSaveAbsolutePath) {
        this.pdfSaveAbsolutePath = pdfSaveAbsolutePath;
    }
}
